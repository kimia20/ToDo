@page "/login"
@using Blazored.LocalStorage;
@using WebEndpoints.ToDo.UI.Models;
@layout LoginLayout;
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorageService;
@inject WebEndpoints.ToDo.UI.Services.CustomStateProvider authStateProvider

<h1 class="h2 font-weight-normal login-title">
    Login
</h1>
<p>@error</p>
<div class="container" >
<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
    <DataAnnotationsValidator />
    <label for="inputUsername" class="sr-only">User Name</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
    <ValidationMessage For="@(() => loginRequest.UserName)" />
    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
    <ValidationMessage For="@(() => loginRequest.Password)" />
    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
    <label class="text-danger">@error</label>
    <NavLink href="register">
        <h6 class="font-weight-normal text-center">Create account</h6>
    </NavLink>
</EditForm>
</div>
@code {
    //[CascadingParameter]
    //private Task<AuthenticationState> AuthenticationStateProvider { get; set; }
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
       // var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated) navigationManager.NavigateTo("/", true);
    }
  
    async Task OnSubmit()
    {
        error = null;
        try
        {
            var result=await authStateProvider.Login(loginRequest);
            if (result.issuccess)
            {
                await _localStorageService.SetItemAsync("jwt-access-token", result.token);
                //await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.expiration};{result.token}").ConfigureAwait(false);
                navigationManager.NavigateTo("/");
            }
            else
            {
                error = result.message;
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}